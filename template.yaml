AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Hassela backend

Parameters: 
  ProjectName:
    Type: String
    Description: Tag most resources with project ProjectName

  GithubBranchName:
    Type: String
    Description: "GitHub Branch"

  GithubRepoOwner:
    Type: String
    Description: "GitHub repo owner user-name. Must be owner"

  GithubRepoName:
    Type: String
    Description: "GitHub repo name"

  GithubSecretName:
    Type: String
    Description: "Name of Github oauth token in AWS Secrets Manager secret"

  BuildSpecFilePath:
    Description: Relative BuildSpec file path for build stage. For more information, see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
    Type: String
    Default: "buildspec.yml"


Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 10
    MemorySize: 128
    Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
    Environment:
      Variables:
        # Powertools env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_SAMPLE_RATE: 1 
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_METRICS_NAMESPACE: !Ref ProjectName


Resources: 
  ### API

  GetHlsUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_url/
      Handler: app.lambda_handler
      Runtime: python3.9
      Tags:
        project: !Ref ProjectName
      Policies:
        - AmazonKinesisVideoStreamsFullAccess
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: "AWS::Include"
          Parameters:
            Location: "./openapi.yml"
      Tags:
        project: !Ref ProjectName

  ### STATIC HOSTING 

  # Bucket to host static web assets
  HostingBucket: 
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      Tags:
        - Key: project
          Value: !Sub ${ProjectName}

  # Identity to allow cloudFront to access our private bucket.
  CloudFrontOriginAccessIdentity: 
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref HostingBucket

  # Bucket policy that allows the aboe OAI to access the buvket.
  HostingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HostingBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref HostingBucket
                  - '/*'
            Principal: 
              AWS: !Join
                - ''
                - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                  - !Ref CloudFrontOriginAccessIdentity

  # CDN to front and cache website
  cloudfrontDistribution: 
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior: 
          AllowedMethods: # Which methods to forward to S3
            - GET
            - HEAD
            - OPTIONS
          CachedMethods: # Which methods to cache responses for at cloudfront
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 60 # in seconds
          MaxTTL: 240 # in seconds
          MinTTL: 60 # in seconds
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: s3origin # Unsure what this does, but required property
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        Origins:
          - DomainName: !GetAtt HostingBucket.RegionalDomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        IPV6Enabled: false
        ViewerCertificate: 
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: project
          Value: !Sub ${ProjectName}

  ### CD PIPELINE
  # Bucket to host pipeline artifacts 
  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: project
          Value: !Ref ProjectName
  
  # Pipeline to orchestrate stages
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ProjectName}-cd-pipeline-github
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages: 
        - Name: Source
          Actions:
            - Name: GithubSourceAction
              OutputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: !Ref GithubBranchName
                OAuthToken: !Join 
                - ''
                - - '{{resolve:secretsmanager:'
                  - !Ref GithubSecretName
                  - '}}'
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref HostingBucket
                Extract: true
              RunOrder: 3
      Tags:
        - Key: project
          Value: !Ref ProjectName
      RestartExecutionOnUpdate: true # Automatically run pipeline after it's been updated.

  # Role used by CodePipeline
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${ProjectName}-codepipeline-service-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: # TODO: SCOPE DOWN!!!
                  - codedeploy:*
                  - codebuild:*
                  - s3:*
                Resource: '*'

  # Build project to use in CodePipeline Build stage
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL # SMALL | MEDIUM |Â LARGE
        Image: 'aws/codebuild/standard:5.0'
        Type: LINUX_CONTAINER
        EnvironmentVariables: # Inject env variables into codeBuild (accessible as ${Name} in the buildspec.yml)
          - Name: HOSTING_BUCKET
            Value: !Ref HostingBucket
          - Name: IDENTITY_POOL_ID
            Value: !Ref IdentityPool
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: USERPOOL_ID
            Value: !Ref UserPool
          - Name: USERPOOL_CLIENT_ID
            Value: !Ref UserPoolClient
      Tags:
        - Key: project
          Value: !Ref ProjectName

  # Role used by the build project
  BuildProjectRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${ProjectName}-codebuild-service-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: # TODO: SCOPE DOWN!!!
                  - logs:*
                  - s3:*
                Resource: '*'

  # Webhook to trigger pipeline
  GitHubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Join 
          - ''
          - - '{{resolve:secretsmanager:'
            - !Ref GithubSecretName
            - '}}'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref CodePipeline
      TargetAction: GithubSourceAction
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true

  ################## 
  # Authentication #
  ##################

 # Cognito UserPool used for authenticting users and locking down AppSync API
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${ProjectName}-userPool
      MfaConfiguration: "OFF"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-userPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  # Creates a federeated Identity pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ProjectName}-IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources.
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: !Sub ${ProjectName}-CognitoUnAuth-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources.
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: !Sub ${ProjectName}-CognitoAuth-Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"


  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn  


Outputs:
  CodePipelineArtifactStoreBucket:
    Description: Bucket used for storing codepieline artifacts
    Value: !Ref CodePipelineArtifactStoreBucket
  Domain:
    Description: Cloudfront Domain
    Value: !GetAtt cloudfrontDistribution.DomainName
  UserPoolId:
    Value: !Ref UserPool
  UserPoolARN:
    Value: !GetAtt UserPool.Arn
  UserPoolClientId:
    Value: !Ref UserPoolClient
  IdentityPoolId:
    Value: !Ref IdentityPool